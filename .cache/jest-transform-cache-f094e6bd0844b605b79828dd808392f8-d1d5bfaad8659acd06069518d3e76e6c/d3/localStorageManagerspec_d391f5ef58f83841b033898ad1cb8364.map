{"file":"/home/stefan/Documents/projects/HoA/storage/projects/ngneat/storage/src/lib/localStorageManager.spec.ts","mappings":";;AAAA,+DAA4D;AAU5D,MAAM,oBAAoB,GAAG,GAAG,EAAE;IAChC,OAAO,IAAI,yCAAmB,EAAU,CAAC;AAC3C,CAAC,CAAC;AAEF,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC1B,MAAM,MAAM,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC;QACtE,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;QAC7E,MAAM,cAAc,GAAG,oBAAoB,EAAE,CAAC;QAC9C,MAAM,QAAQ,GAAG,cAAc,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACxD,MAAM,CAAC,GAAG,CAAC,CAAC,oBAAoB,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;QAChE,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,oBAAoB,CAAC,CAAC;QAC/F,MAAM,cAAc,GAAG,oBAAoB,EAAE,CAAC;QAC9C,MAAM,KAAK,GAAG,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC7C,MAAM,CAAC,GAAG,CAAC,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;QACxC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/stefan/Documents/projects/HoA/storage/projects/ngneat/storage/src/lib/localStorageManager.spec.ts"],"sourcesContent":["import { LocalStorageManager } from \"./localStorageManager\";\n\ntype Person = {\n  name: string;\n  phone: {\n    num: number;\n    prefix: number;\n  };\n};\n\nconst createStorageManager = () => {\n  return new LocalStorageManager<Person>();\n};\n\ndescribe('LocalStorageManager', () => {\n  it('should set value', () => {\n    const person = { name: 'ewan', phone: { num: 5550153, prefix: 288 } };\n    const spy = jest.spyOn(localStorage, 'setItem').mockImplementation(() => {});\n    const storageManager = createStorageManager();\n    const response = storageManager.setValue('key', person);\n    expect(spy).toHaveBeenCalledWith('key', JSON.stringify(person));\n    expect(response).toEqual(person);\n  });\n\n  it('should get value', () => {\n    const spy = jest.spyOn(localStorage, 'getItem').mockImplementation(() => '{ \"name\": \"ewan\" }');\n    const storageManager = createStorageManager();\n    const value = storageManager.getValue('key');\n    expect(spy).toHaveBeenCalledWith('key');\n    expect(value).toEqual({ name: 'ewan' });\n  });\n});\n"],"version":3}